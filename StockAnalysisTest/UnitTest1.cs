using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using StockAnalysis;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
namespace StockAnalysisTest
{
    [TestClass]
    public class test2W
    {
        [TestMethod]
        public void ExtractValueFromLineTest()
        {
            var map = new ExtractValuesForIndicatorsMapper();
            string line = null;
            line = "American Samoa,ASM,\"Energy imports, net (% of energy use)\",EG.IMP.CONS.ZS,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,";
            Assert.AreEqual(map.ExtractValueFromLine(line).ToString(), "American Samoa" + '\t' + "ASM" + '\t' + "EG.IMP.CONS.ZS" + '\t' + "yearsArray");

            line = "Belgium,BEL,Gross savings (% of GDP),NY.GNS.ICTR.ZS,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,24.5374865053521,24.2387691342795,25.1233876429796,24.8327482614588,25.4802978713119,26.4393126170856,24.5410438263503,20.0458182187062,22.7875752405847,21.9560381821309,20.0495503244423,";
            Assert.AreEqual(map.ExtractValueFromLine(line).ToString(), "Belgium" + '\t' + "BEL" + '\t' + "NY.GNS.ICTR.ZS" + '\t' + "yearsArray");

            line = "China,CHN,Trade (% of GDP),NE.TRD.GNFS.ZS,,,,,,,,,,,5.31417464042987,5.7780876427363,6.61252874469824,8.11333599811378,10.2360033798705,9.15870640748494,9.28709062683127,9.01229438466629,13.671585858882,17.9575048911315,21.6610357076171,24.6437462688846,20.9722048171176,19.2566665076141,20.8015978477736,22.5022830466518,22.4804678441894,28.8679832395111,30.9783492968083,29.2382835610704,29.1592154396966,31.6745527804544,36.1131095654709,41.9763048008808,41.2172418348267,38.807583225094,38.0575641541626,39.0126436242727,36.3932537662924,37.6906967784675,44.2436257838374,43.0805516497794,47.6953392272446,56.913524901422,65.3520676994078,68.6329089388635,70.5670717957572,68.0279605580831,62.2437749287781,49.0157146945766,55.0327293637961,54.5873742016555,51.8396599845019,";
            Assert.AreEqual(map.ExtractValueFromLine(line).ToString(), "China" + '\t' + "CHN" + '\t' + "NE.TRD.GNFS.ZS" + '\t' + "yearsArray");

            line = "Mexico,MEX,General government final consumption expenditure (% of GDP),NE.CON.GOVT.ZS,5.64141210861157,5.71730025392988,6.26164492330959,6.51952178337264,6.40115433921864,6.28841905595009,6.50091958831675,6.57098781664185,6.84078833653555,6.86935921937719,7.2575457254282,7.61848203407679,8.63060260143627,9.18041665888686,9.14387887253937,10.3170874627676,11.0080006955668,10.7592826048998,10.9179998835457,10.8985749201782,10.0385507874691,10.7669714112675,10.4701069380649,8.80220032418368,9.23500723217571,9.22954144530937,9.10224708302384,8.79175865274745,8.41389993951457,8.26856147670727,8.38401370400601,9.07789450463819,9.930523959944,12.8191809253311,12.3619920072095,13.0386672102987,12.319225359863,11.9621225909832,11.4573238208942,11.2647005842694,11.1112552424925,11.2481415963092,11.3359048727142,11.1730013085133,10.615584403146,10.6463625206015,10.5043184854876,10.5642648071678,10.8821231989517,11.9859114112109,11.7697998499304,11.7364039908715,11.6401164847278,";
            Assert.AreEqual(map.ExtractValueFromLine(line).ToString(), "Mexico" + '\t' + "MEX" + '\t' + "NE.CON.GOVT.ZS" + '\t' + "yearsArray");

            line = "Sweden,SWE,\"Inflation, consumer prices (annual %)\",FP.CPI.TOTL.ZG,,2.15797192558411,4.76620180487973,2.87076188225119,3.38864520800537,5.01276889443938,6.40481292108097,4.28931459904224,1.94312384507126,2.69199335334251,7.01636598860004,7.39554145742018,6.00739068224512,6.71799587012281,9.91172366577413,9.77987753386478,10.27855380904,11.4880332078599,9.92041143576576,7.20978596755424,13.703583245406,12.117676472873,8.57057905286325,8.8730658635052,8.06187900906545,7.3614990687267,4.23871212548794,4.18074983100216,5.83978038432717,6.43716104692307,10.4696499778468,9.33702322223553,2.28164777520989,4.64799340099704,2.20021248157917,2.52841957010195,0.470973017170806,0.517594973794814,-0.13601917222627,0.454014787909983,1.03725464876037,2.40595834145442,2.15848213589258,1.92565534892407,0.373659828721841,0.453170852576164,1.360214686277,2.21216883436671,3.43704910602926,-0.494460544378455,1.15798802715695,2.96115073822077,0.888377506923476,";
            Assert.AreEqual(map.ExtractValueFromLine(line).ToString(), "Sweden" + '\t' + "SWE" + '\t' + "FP.CPI.TOTL.ZG" + '\t' + "yearsArray");


        }

        [TestMethod]
        public void ComputeTrendTest(SortedList<int, double> years, int currentYear)
        {
            var map = new ExtractValuesForIndicatorsMapper();
            var data = new SortedList<int, double>();
            double[] inflationVal ={100.764370305146,104.476042578907,
            164.776810573524,343.810676313218,626.718592068498,672.180651051974,
            90.0966050749321,131.327020980362,342.955110191569,3079.8097030531,
            2313.96466339751,171.671696468307,24.8999485988254,10.6114940961306,
            4.17734724367,3.37611684980121,0.155695900742245,0.527258257063252
            ,0.920336467095566,-1.16689546970002,-0.935939411978723,-1.06663550777849,
            25.8684978656633,13.4428492915644,4.41571792341912,9.63939954620811,
            10.901124534884,
            8.83141298885049};
            int length = inflationVal.Count();

            int year = 2007;
            for (int i = length - 1; i >= 0; i--)
            {
                data.Add(year, inflationVal[i]);
                year--;
            }
            Assert.IsTrue( map.ComputeTrend(data, 1998)<1);
            Assert.IsTrue( map.ComputeTrend(data, 1999)<1);
            Assert.IsTrue( map.ComputeTrend(data, 2000)<1);
            Assert.IsTrue( map.ComputeTrend(data, 2001)<1);
             Assert.IsTrue(map.ComputeTrend(data, 2002)>1);
            Assert.IsTrue(map.ComputeTrend(data, 2003)>1);
            
        }
    }
   
}
